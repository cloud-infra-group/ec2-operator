// Code generated by counterfeiter. DO NOT EDIT.
package ec2clientfakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go-v2/service/ec2"
	"github.com/cloud-infra-group/ec2-operator/internal/ec2client"
)

type FakeEC2API struct {
	CreateVpcEndpointServiceConfigurationStub        func(context.Context, *ec2.CreateVpcEndpointServiceConfigurationInput, ...func(*ec2.Options)) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error)
	createVpcEndpointServiceConfigurationMutex       sync.RWMutex
	createVpcEndpointServiceConfigurationArgsForCall []struct {
		arg1 context.Context
		arg2 *ec2.CreateVpcEndpointServiceConfigurationInput
		arg3 []func(*ec2.Options)
	}
	createVpcEndpointServiceConfigurationReturns struct {
		result1 *ec2.CreateVpcEndpointServiceConfigurationOutput
		result2 error
	}
	createVpcEndpointServiceConfigurationReturnsOnCall map[int]struct {
		result1 *ec2.CreateVpcEndpointServiceConfigurationOutput
		result2 error
	}
	DeleteVpcEndpointServiceConfigurationsStub        func(context.Context, *ec2.DeleteVpcEndpointServiceConfigurationsInput, ...func(*ec2.Options)) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error)
	deleteVpcEndpointServiceConfigurationsMutex       sync.RWMutex
	deleteVpcEndpointServiceConfigurationsArgsForCall []struct {
		arg1 context.Context
		arg2 *ec2.DeleteVpcEndpointServiceConfigurationsInput
		arg3 []func(*ec2.Options)
	}
	deleteVpcEndpointServiceConfigurationsReturns struct {
		result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
		result2 error
	}
	deleteVpcEndpointServiceConfigurationsReturnsOnCall map[int]struct {
		result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
		result2 error
	}
	DescribeVpcEndpointServiceConfigurationsStub        func(context.Context, *ec2.DescribeVpcEndpointServiceConfigurationsInput, ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error)
	describeVpcEndpointServiceConfigurationsMutex       sync.RWMutex
	describeVpcEndpointServiceConfigurationsArgsForCall []struct {
		arg1 context.Context
		arg2 *ec2.DescribeVpcEndpointServiceConfigurationsInput
		arg3 []func(*ec2.Options)
	}
	describeVpcEndpointServiceConfigurationsReturns struct {
		result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
		result2 error
	}
	describeVpcEndpointServiceConfigurationsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
		result2 error
	}
	DescribeVpcEndpointServicePermissionsStub        func(context.Context, *ec2.DescribeVpcEndpointServicePermissionsInput, ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error)
	describeVpcEndpointServicePermissionsMutex       sync.RWMutex
	describeVpcEndpointServicePermissionsArgsForCall []struct {
		arg1 context.Context
		arg2 *ec2.DescribeVpcEndpointServicePermissionsInput
		arg3 []func(*ec2.Options)
	}
	describeVpcEndpointServicePermissionsReturns struct {
		result1 *ec2.DescribeVpcEndpointServicePermissionsOutput
		result2 error
	}
	describeVpcEndpointServicePermissionsReturnsOnCall map[int]struct {
		result1 *ec2.DescribeVpcEndpointServicePermissionsOutput
		result2 error
	}
	ModifyVpcEndpointServicePermissionsStub        func(context.Context, *ec2.ModifyVpcEndpointServicePermissionsInput, ...func(*ec2.Options)) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error)
	modifyVpcEndpointServicePermissionsMutex       sync.RWMutex
	modifyVpcEndpointServicePermissionsArgsForCall []struct {
		arg1 context.Context
		arg2 *ec2.ModifyVpcEndpointServicePermissionsInput
		arg3 []func(*ec2.Options)
	}
	modifyVpcEndpointServicePermissionsReturns struct {
		result1 *ec2.ModifyVpcEndpointServicePermissionsOutput
		result2 error
	}
	modifyVpcEndpointServicePermissionsReturnsOnCall map[int]struct {
		result1 *ec2.ModifyVpcEndpointServicePermissionsOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfiguration(arg1 context.Context, arg2 *ec2.CreateVpcEndpointServiceConfigurationInput, arg3 ...func(*ec2.Options)) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error) {
	fake.createVpcEndpointServiceConfigurationMutex.Lock()
	ret, specificReturn := fake.createVpcEndpointServiceConfigurationReturnsOnCall[len(fake.createVpcEndpointServiceConfigurationArgsForCall)]
	fake.createVpcEndpointServiceConfigurationArgsForCall = append(fake.createVpcEndpointServiceConfigurationArgsForCall, struct {
		arg1 context.Context
		arg2 *ec2.CreateVpcEndpointServiceConfigurationInput
		arg3 []func(*ec2.Options)
	}{arg1, arg2, arg3})
	stub := fake.CreateVpcEndpointServiceConfigurationStub
	fakeReturns := fake.createVpcEndpointServiceConfigurationReturns
	fake.recordInvocation("CreateVpcEndpointServiceConfiguration", []interface{}{arg1, arg2, arg3})
	fake.createVpcEndpointServiceConfigurationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationCallCount() int {
	fake.createVpcEndpointServiceConfigurationMutex.RLock()
	defer fake.createVpcEndpointServiceConfigurationMutex.RUnlock()
	return len(fake.createVpcEndpointServiceConfigurationArgsForCall)
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationCalls(stub func(context.Context, *ec2.CreateVpcEndpointServiceConfigurationInput, ...func(*ec2.Options)) (*ec2.CreateVpcEndpointServiceConfigurationOutput, error)) {
	fake.createVpcEndpointServiceConfigurationMutex.Lock()
	defer fake.createVpcEndpointServiceConfigurationMutex.Unlock()
	fake.CreateVpcEndpointServiceConfigurationStub = stub
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationArgsForCall(i int) (context.Context, *ec2.CreateVpcEndpointServiceConfigurationInput, []func(*ec2.Options)) {
	fake.createVpcEndpointServiceConfigurationMutex.RLock()
	defer fake.createVpcEndpointServiceConfigurationMutex.RUnlock()
	argsForCall := fake.createVpcEndpointServiceConfigurationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationReturns(result1 *ec2.CreateVpcEndpointServiceConfigurationOutput, result2 error) {
	fake.createVpcEndpointServiceConfigurationMutex.Lock()
	defer fake.createVpcEndpointServiceConfigurationMutex.Unlock()
	fake.CreateVpcEndpointServiceConfigurationStub = nil
	fake.createVpcEndpointServiceConfigurationReturns = struct {
		result1 *ec2.CreateVpcEndpointServiceConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) CreateVpcEndpointServiceConfigurationReturnsOnCall(i int, result1 *ec2.CreateVpcEndpointServiceConfigurationOutput, result2 error) {
	fake.createVpcEndpointServiceConfigurationMutex.Lock()
	defer fake.createVpcEndpointServiceConfigurationMutex.Unlock()
	fake.CreateVpcEndpointServiceConfigurationStub = nil
	if fake.createVpcEndpointServiceConfigurationReturnsOnCall == nil {
		fake.createVpcEndpointServiceConfigurationReturnsOnCall = make(map[int]struct {
			result1 *ec2.CreateVpcEndpointServiceConfigurationOutput
			result2 error
		})
	}
	fake.createVpcEndpointServiceConfigurationReturnsOnCall[i] = struct {
		result1 *ec2.CreateVpcEndpointServiceConfigurationOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurations(arg1 context.Context, arg2 *ec2.DeleteVpcEndpointServiceConfigurationsInput, arg3 ...func(*ec2.Options)) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error) {
	fake.deleteVpcEndpointServiceConfigurationsMutex.Lock()
	ret, specificReturn := fake.deleteVpcEndpointServiceConfigurationsReturnsOnCall[len(fake.deleteVpcEndpointServiceConfigurationsArgsForCall)]
	fake.deleteVpcEndpointServiceConfigurationsArgsForCall = append(fake.deleteVpcEndpointServiceConfigurationsArgsForCall, struct {
		arg1 context.Context
		arg2 *ec2.DeleteVpcEndpointServiceConfigurationsInput
		arg3 []func(*ec2.Options)
	}{arg1, arg2, arg3})
	stub := fake.DeleteVpcEndpointServiceConfigurationsStub
	fakeReturns := fake.deleteVpcEndpointServiceConfigurationsReturns
	fake.recordInvocation("DeleteVpcEndpointServiceConfigurations", []interface{}{arg1, arg2, arg3})
	fake.deleteVpcEndpointServiceConfigurationsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsCallCount() int {
	fake.deleteVpcEndpointServiceConfigurationsMutex.RLock()
	defer fake.deleteVpcEndpointServiceConfigurationsMutex.RUnlock()
	return len(fake.deleteVpcEndpointServiceConfigurationsArgsForCall)
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsCalls(stub func(context.Context, *ec2.DeleteVpcEndpointServiceConfigurationsInput, ...func(*ec2.Options)) (*ec2.DeleteVpcEndpointServiceConfigurationsOutput, error)) {
	fake.deleteVpcEndpointServiceConfigurationsMutex.Lock()
	defer fake.deleteVpcEndpointServiceConfigurationsMutex.Unlock()
	fake.DeleteVpcEndpointServiceConfigurationsStub = stub
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsArgsForCall(i int) (context.Context, *ec2.DeleteVpcEndpointServiceConfigurationsInput, []func(*ec2.Options)) {
	fake.deleteVpcEndpointServiceConfigurationsMutex.RLock()
	defer fake.deleteVpcEndpointServiceConfigurationsMutex.RUnlock()
	argsForCall := fake.deleteVpcEndpointServiceConfigurationsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsReturns(result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput, result2 error) {
	fake.deleteVpcEndpointServiceConfigurationsMutex.Lock()
	defer fake.deleteVpcEndpointServiceConfigurationsMutex.Unlock()
	fake.DeleteVpcEndpointServiceConfigurationsStub = nil
	fake.deleteVpcEndpointServiceConfigurationsReturns = struct {
		result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DeleteVpcEndpointServiceConfigurationsReturnsOnCall(i int, result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput, result2 error) {
	fake.deleteVpcEndpointServiceConfigurationsMutex.Lock()
	defer fake.deleteVpcEndpointServiceConfigurationsMutex.Unlock()
	fake.DeleteVpcEndpointServiceConfigurationsStub = nil
	if fake.deleteVpcEndpointServiceConfigurationsReturnsOnCall == nil {
		fake.deleteVpcEndpointServiceConfigurationsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
			result2 error
		})
	}
	fake.deleteVpcEndpointServiceConfigurationsReturnsOnCall[i] = struct {
		result1 *ec2.DeleteVpcEndpointServiceConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurations(arg1 context.Context, arg2 *ec2.DescribeVpcEndpointServiceConfigurationsInput, arg3 ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error) {
	fake.describeVpcEndpointServiceConfigurationsMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointServiceConfigurationsReturnsOnCall[len(fake.describeVpcEndpointServiceConfigurationsArgsForCall)]
	fake.describeVpcEndpointServiceConfigurationsArgsForCall = append(fake.describeVpcEndpointServiceConfigurationsArgsForCall, struct {
		arg1 context.Context
		arg2 *ec2.DescribeVpcEndpointServiceConfigurationsInput
		arg3 []func(*ec2.Options)
	}{arg1, arg2, arg3})
	stub := fake.DescribeVpcEndpointServiceConfigurationsStub
	fakeReturns := fake.describeVpcEndpointServiceConfigurationsReturns
	fake.recordInvocation("DescribeVpcEndpointServiceConfigurations", []interface{}{arg1, arg2, arg3})
	fake.describeVpcEndpointServiceConfigurationsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsCallCount() int {
	fake.describeVpcEndpointServiceConfigurationsMutex.RLock()
	defer fake.describeVpcEndpointServiceConfigurationsMutex.RUnlock()
	return len(fake.describeVpcEndpointServiceConfigurationsArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsCalls(stub func(context.Context, *ec2.DescribeVpcEndpointServiceConfigurationsInput, ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointServiceConfigurationsOutput, error)) {
	fake.describeVpcEndpointServiceConfigurationsMutex.Lock()
	defer fake.describeVpcEndpointServiceConfigurationsMutex.Unlock()
	fake.DescribeVpcEndpointServiceConfigurationsStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsArgsForCall(i int) (context.Context, *ec2.DescribeVpcEndpointServiceConfigurationsInput, []func(*ec2.Options)) {
	fake.describeVpcEndpointServiceConfigurationsMutex.RLock()
	defer fake.describeVpcEndpointServiceConfigurationsMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointServiceConfigurationsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsReturns(result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput, result2 error) {
	fake.describeVpcEndpointServiceConfigurationsMutex.Lock()
	defer fake.describeVpcEndpointServiceConfigurationsMutex.Unlock()
	fake.DescribeVpcEndpointServiceConfigurationsStub = nil
	fake.describeVpcEndpointServiceConfigurationsReturns = struct {
		result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServiceConfigurationsReturnsOnCall(i int, result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput, result2 error) {
	fake.describeVpcEndpointServiceConfigurationsMutex.Lock()
	defer fake.describeVpcEndpointServiceConfigurationsMutex.Unlock()
	fake.DescribeVpcEndpointServiceConfigurationsStub = nil
	if fake.describeVpcEndpointServiceConfigurationsReturnsOnCall == nil {
		fake.describeVpcEndpointServiceConfigurationsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
			result2 error
		})
	}
	fake.describeVpcEndpointServiceConfigurationsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcEndpointServiceConfigurationsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissions(arg1 context.Context, arg2 *ec2.DescribeVpcEndpointServicePermissionsInput, arg3 ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error) {
	fake.describeVpcEndpointServicePermissionsMutex.Lock()
	ret, specificReturn := fake.describeVpcEndpointServicePermissionsReturnsOnCall[len(fake.describeVpcEndpointServicePermissionsArgsForCall)]
	fake.describeVpcEndpointServicePermissionsArgsForCall = append(fake.describeVpcEndpointServicePermissionsArgsForCall, struct {
		arg1 context.Context
		arg2 *ec2.DescribeVpcEndpointServicePermissionsInput
		arg3 []func(*ec2.Options)
	}{arg1, arg2, arg3})
	stub := fake.DescribeVpcEndpointServicePermissionsStub
	fakeReturns := fake.describeVpcEndpointServicePermissionsReturns
	fake.recordInvocation("DescribeVpcEndpointServicePermissions", []interface{}{arg1, arg2, arg3})
	fake.describeVpcEndpointServicePermissionsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsCallCount() int {
	fake.describeVpcEndpointServicePermissionsMutex.RLock()
	defer fake.describeVpcEndpointServicePermissionsMutex.RUnlock()
	return len(fake.describeVpcEndpointServicePermissionsArgsForCall)
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsCalls(stub func(context.Context, *ec2.DescribeVpcEndpointServicePermissionsInput, ...func(*ec2.Options)) (*ec2.DescribeVpcEndpointServicePermissionsOutput, error)) {
	fake.describeVpcEndpointServicePermissionsMutex.Lock()
	defer fake.describeVpcEndpointServicePermissionsMutex.Unlock()
	fake.DescribeVpcEndpointServicePermissionsStub = stub
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsArgsForCall(i int) (context.Context, *ec2.DescribeVpcEndpointServicePermissionsInput, []func(*ec2.Options)) {
	fake.describeVpcEndpointServicePermissionsMutex.RLock()
	defer fake.describeVpcEndpointServicePermissionsMutex.RUnlock()
	argsForCall := fake.describeVpcEndpointServicePermissionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsReturns(result1 *ec2.DescribeVpcEndpointServicePermissionsOutput, result2 error) {
	fake.describeVpcEndpointServicePermissionsMutex.Lock()
	defer fake.describeVpcEndpointServicePermissionsMutex.Unlock()
	fake.DescribeVpcEndpointServicePermissionsStub = nil
	fake.describeVpcEndpointServicePermissionsReturns = struct {
		result1 *ec2.DescribeVpcEndpointServicePermissionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) DescribeVpcEndpointServicePermissionsReturnsOnCall(i int, result1 *ec2.DescribeVpcEndpointServicePermissionsOutput, result2 error) {
	fake.describeVpcEndpointServicePermissionsMutex.Lock()
	defer fake.describeVpcEndpointServicePermissionsMutex.Unlock()
	fake.DescribeVpcEndpointServicePermissionsStub = nil
	if fake.describeVpcEndpointServicePermissionsReturnsOnCall == nil {
		fake.describeVpcEndpointServicePermissionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.DescribeVpcEndpointServicePermissionsOutput
			result2 error
		})
	}
	fake.describeVpcEndpointServicePermissionsReturnsOnCall[i] = struct {
		result1 *ec2.DescribeVpcEndpointServicePermissionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissions(arg1 context.Context, arg2 *ec2.ModifyVpcEndpointServicePermissionsInput, arg3 ...func(*ec2.Options)) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error) {
	fake.modifyVpcEndpointServicePermissionsMutex.Lock()
	ret, specificReturn := fake.modifyVpcEndpointServicePermissionsReturnsOnCall[len(fake.modifyVpcEndpointServicePermissionsArgsForCall)]
	fake.modifyVpcEndpointServicePermissionsArgsForCall = append(fake.modifyVpcEndpointServicePermissionsArgsForCall, struct {
		arg1 context.Context
		arg2 *ec2.ModifyVpcEndpointServicePermissionsInput
		arg3 []func(*ec2.Options)
	}{arg1, arg2, arg3})
	stub := fake.ModifyVpcEndpointServicePermissionsStub
	fakeReturns := fake.modifyVpcEndpointServicePermissionsReturns
	fake.recordInvocation("ModifyVpcEndpointServicePermissions", []interface{}{arg1, arg2, arg3})
	fake.modifyVpcEndpointServicePermissionsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsCallCount() int {
	fake.modifyVpcEndpointServicePermissionsMutex.RLock()
	defer fake.modifyVpcEndpointServicePermissionsMutex.RUnlock()
	return len(fake.modifyVpcEndpointServicePermissionsArgsForCall)
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsCalls(stub func(context.Context, *ec2.ModifyVpcEndpointServicePermissionsInput, ...func(*ec2.Options)) (*ec2.ModifyVpcEndpointServicePermissionsOutput, error)) {
	fake.modifyVpcEndpointServicePermissionsMutex.Lock()
	defer fake.modifyVpcEndpointServicePermissionsMutex.Unlock()
	fake.ModifyVpcEndpointServicePermissionsStub = stub
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsArgsForCall(i int) (context.Context, *ec2.ModifyVpcEndpointServicePermissionsInput, []func(*ec2.Options)) {
	fake.modifyVpcEndpointServicePermissionsMutex.RLock()
	defer fake.modifyVpcEndpointServicePermissionsMutex.RUnlock()
	argsForCall := fake.modifyVpcEndpointServicePermissionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsReturns(result1 *ec2.ModifyVpcEndpointServicePermissionsOutput, result2 error) {
	fake.modifyVpcEndpointServicePermissionsMutex.Lock()
	defer fake.modifyVpcEndpointServicePermissionsMutex.Unlock()
	fake.ModifyVpcEndpointServicePermissionsStub = nil
	fake.modifyVpcEndpointServicePermissionsReturns = struct {
		result1 *ec2.ModifyVpcEndpointServicePermissionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) ModifyVpcEndpointServicePermissionsReturnsOnCall(i int, result1 *ec2.ModifyVpcEndpointServicePermissionsOutput, result2 error) {
	fake.modifyVpcEndpointServicePermissionsMutex.Lock()
	defer fake.modifyVpcEndpointServicePermissionsMutex.Unlock()
	fake.ModifyVpcEndpointServicePermissionsStub = nil
	if fake.modifyVpcEndpointServicePermissionsReturnsOnCall == nil {
		fake.modifyVpcEndpointServicePermissionsReturnsOnCall = make(map[int]struct {
			result1 *ec2.ModifyVpcEndpointServicePermissionsOutput
			result2 error
		})
	}
	fake.modifyVpcEndpointServicePermissionsReturnsOnCall[i] = struct {
		result1 *ec2.ModifyVpcEndpointServicePermissionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeEC2API) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createVpcEndpointServiceConfigurationMutex.RLock()
	defer fake.createVpcEndpointServiceConfigurationMutex.RUnlock()
	fake.deleteVpcEndpointServiceConfigurationsMutex.RLock()
	defer fake.deleteVpcEndpointServiceConfigurationsMutex.RUnlock()
	fake.describeVpcEndpointServiceConfigurationsMutex.RLock()
	defer fake.describeVpcEndpointServiceConfigurationsMutex.RUnlock()
	fake.describeVpcEndpointServicePermissionsMutex.RLock()
	defer fake.describeVpcEndpointServicePermissionsMutex.RUnlock()
	fake.modifyVpcEndpointServicePermissionsMutex.RLock()
	defer fake.modifyVpcEndpointServicePermissionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEC2API) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ec2client.EC2API = new(FakeEC2API)
