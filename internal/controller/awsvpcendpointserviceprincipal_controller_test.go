/*
Copyright 2024.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controller_test

import (
	"context"
	"fmt"
	"time"

	"github.com/aws/aws-sdk-go-v2/service/ec2"
	ec2types "github.com/aws/aws-sdk-go-v2/service/ec2/types"
	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/envtest/komega"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"

	ec2operatorv1alpha1 "github.com/cloud-infra-group/ec2-operator/api/v1alpha1"
	"github.com/cloud-infra-group/ec2-operator/internal/controller"
	mock "github.com/cloud-infra-group/ec2-operator/internal/ec2client/ec2clientfakes"
)

var _ = Describe("AWSVPCEndpointServicePrincipal Controller", func() {
	Context("When reconciling a resource", func() {
		const (
			waitShort       = 10 * time.Second
			pollingInterval = 500 * time.Millisecond
			resourceName    = "test-principal-resource"
		)

		var (
			ctx context.Context
			// mockEC@Client is a mock AWS EC2 client generated by counterfieter
			mockEC2Client *mock.FakeEC2API
			// controllerReconciler is the controller these tests are for
			controllerReconciler           *controller.AWSVPCEndpointServicePrincipalReconciler
			typeNamespacedName             types.NamespacedName
			principal                      = "arn:aws:iam::987654321012:root"
			awsvpcendpointserviceprincipal = &ec2operatorv1alpha1.AWSVPCEndpointServicePrincipal{}
		)

		finalizerReconcile := func() {
			result, err := controllerReconciler.Reconcile(ctx, reconcile.Request{
				NamespacedName: typeNamespacedName,
			})
			Expect(err).NotTo(HaveOccurred())
			// expect a requeue since the first time should just be setting the finalizer
			Expect(result.IsZero()).To(BeFalse())

			// Verify the reconciler updated the resource status as expected.
			updatedResource := &ec2operatorv1alpha1.AWSVPCEndpointServicePrincipal{
				ObjectMeta: metav1.ObjectMeta{
					Name:      typeNamespacedName.Name,
					Namespace: typeNamespacedName.Namespace,
				},
			}
			Eventually(komega.Object(updatedResource), waitShort, pollingInterval).ShouldNot(HaveField("ObjectMeta.Finalizers", BeZero()))
		}

		komega.SetClient(k8sClient)
		ctx = context.Background()
		mockEC2Client = &mock.FakeEC2API{}

		typeNamespacedName = types.NamespacedName{
			Name:      resourceName,
			Namespace: "default",
		}

		controllerReconciler = &controller.AWSVPCEndpointServicePrincipalReconciler{
			Client: k8sClient,
			Scheme: k8sManager.GetScheme(),
			EC2API: mockEC2Client,
		}

		BeforeEach(func() {
			By("creating the custom resource for the Kind AWSVPCEndpointServicePrincipal", func() {
				// Create a sample AWSVPCEndpointService resource if it doesn't exist to be used in tests.
				awsvpcendpointservice := &ec2operatorv1alpha1.AWSVPCEndpointService{}
				err := k8sClient.Get(ctx, typeNamespacedName, awsvpcendpointservice)
				Expect(client.IgnoreNotFound(err)).To(Succeed())
				if err == nil {
					awsvpcendpointservice = &ec2operatorv1alpha1.AWSVPCEndpointService{
						ObjectMeta: metav1.ObjectMeta{
							Name:      typeNamespacedName.Name,
							Namespace: typeNamespacedName.Namespace,
						},
						Spec: ec2operatorv1alpha1.AWSVPCEndpointServiceSpec{
							NetworkLoadBalancerARN: "arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/net/test-nlb/abcdef123456",
							AcceptanceRequired:     false,
							Tags: map[string]string{
								"Environment": "test",
							},
						},
					}
				}
				// Ensure the resource is successfully created in the test environment
				Expect(k8sClient.Create(ctx, awsvpcendpointservice)).To(Succeed())

				// Create a test AWSVPCEndpointServicePrincipal
				awsvpcendpointserviceprincipal := &ec2operatorv1alpha1.AWSVPCEndpointServicePrincipal{
					ObjectMeta: metav1.ObjectMeta{
						Name:      typeNamespacedName.Name,
						Namespace: typeNamespacedName.Namespace,
					},
					Spec: ec2operatorv1alpha1.AWSVPCEndpointServicePrincipalSpec{
						AWSVPCEndpointServiceRef: ec2operatorv1alpha1.AWSVPCEndpointServiceRef{
							Name:      typeNamespacedName.Name,
							Namespace: typeNamespacedName.Namespace,
						},
						PrincipalARN: principal,
					},
				}
				Expect(k8sClient.Create(ctx, awsvpcendpointserviceprincipal)).To(Succeed())
			})
		})

		AfterEach(func() {
			// Clean up the test resource from the test environment after each test.
			resource := &ec2operatorv1alpha1.AWSVPCEndpointServicePrincipal{}
			err := k8sClient.Get(ctx, typeNamespacedName, resource)
			Expect(client.IgnoreNotFound(err)).To(Succeed())
			if errors.IsNotFound(err) {
				return
			}

			resource.ObjectMeta.Finalizers = []string{}
			err = k8sClient.Update(ctx, resource)
			Expect(client.IgnoreNotFound(err)).To(Succeed())
			Eventually(komega.Object(resource), waitShort, pollingInterval).Should(HaveField("ObjectMeta.Finalizers", BeZero()))

			// reset the variable in order to ignore resource version
			resource = &ec2operatorv1alpha1.AWSVPCEndpointServicePrincipal{
				ObjectMeta: metav1.ObjectMeta{
					Name:      typeNamespacedName.Name,
					Namespace: typeNamespacedName.Namespace,
				},
			}
			err = k8sClient.Delete(ctx, resource)
			Expect(client.IgnoreNotFound(err)).To(Succeed())

			// Verify the resource is no longer present in the cluster.
			Eventually(func() error {
				_, err := komega.Object(resource)()
				return err
			}, waitShort, pollingInterval).Should(Satisfy(errors.IsNotFound))

			By("Cleanup the specific resource instance AWSVPCEndpointServicePrincipal")
			Expect(client.IgnoreNotFound(err)).To(Succeed())
		})

		It("should successfully reconcile the resource and add the Service Principal to the VPC endpoint service", func() {
			By("Reconciling the first time to set the finalizer", finalizerReconcile)

			By("Reconciling the created resource using mock ec2 responses", func() {
				mockEC2Client.DescribeVpcEndpointServicePermissionsReturns(
					&ec2.DescribeVpcEndpointServicePermissionsOutput{
						AllowedPrincipals: []ec2types.AllowedPrincipal{}},
					nil)
				mockEC2Client.ModifyVpcEndpointServicePermissionsReturns(
					&ec2.ModifyVpcEndpointServicePermissionsOutput{
						AddedPrincipals: []ec2types.AddedPrincipal{
							{Principal: &principal},
						},
					}, nil)

				_, err := controllerReconciler.Reconcile(ctx, reconcile.Request{
					NamespacedName: typeNamespacedName,
				})
				Expect(err).NotTo(HaveOccurred())
				Expect(mockEC2Client.DescribeVpcEndpointServicePermissionsCallCount()).To(Equal(1))
				Expect(mockEC2Client.ModifyVpcEndpointServicePermissionsCallCount()).To(Equal(1))

				updatedResource := &ec2operatorv1alpha1.AWSVPCEndpointServicePrincipal{
					ObjectMeta: metav1.ObjectMeta{
						Name:      typeNamespacedName.Name,
						Namespace: typeNamespacedName.Namespace,
					},
				}
				By(fmt.Sprintf("Waiting for AWSVPCEndpointServicePrincipal resource %s status to be 'Ready'", typeNamespacedName.Name))
				Eventually(komega.Object(updatedResource), waitShort, pollingInterval).Should(HaveField("Status.Ready", true))
			})
		})
		It("should successfully reconcile the resource and do nothing if the principal already exists on the VPC endpoint service", func() {
			By("Reconciling the first time to set the finalizer", finalizerReconcile)
			By("Reconciling the created resource using mock ec2 responses simulating that the principal already exists", func() {
				mockEC2Client.DescribeVpcEndpointServicePermissionsReturns(
					&ec2.DescribeVpcEndpointServicePermissionsOutput{
						AllowedPrincipals: []ec2types.AllowedPrincipal{
							{Principal: &principal},
						}},
					nil)

				_, err := controllerReconciler.Reconcile(ctx, reconcile.Request{
					NamespacedName: typeNamespacedName,
				})
				Expect(err).NotTo(HaveOccurred())
				Expect(mockEC2Client.DescribeVpcEndpointServicePermissionsCallCount()).To(Equal(1))
				Expect(mockEC2Client.ModifyVpcEndpointServicePermissionsCallCount()).To(Equal(0))

				updatedResource := &ec2operatorv1alpha1.AWSVPCEndpointServicePrincipal{
					ObjectMeta: metav1.ObjectMeta{
						Name:      typeNamespacedName.Name,
						Namespace: typeNamespacedName.Namespace,
					},
				}
				By(fmt.Sprintf("Waiting for AWSVPCEndpointServicePrincipal resource %s status to be 'Ready'", typeNamespacedName.Name))
				Eventually(komega.Object(updatedResource), waitShort, pollingInterval).Should(HaveField("Status.Ready", true))
			})
		})

		It("should successfully reconcile the resource and delete the Service Principal from the VPC endpoint service", func() {
			By("Reconciling the first time to set the finalizer", finalizerReconcile)
			By("Reconciling the created resource using mock ec2 responses simulating that the principal already exists", func() {
				mockEC2Client.DescribeVpcEndpointServicePermissionsReturns(
					&ec2.DescribeVpcEndpointServicePermissionsOutput{
						AllowedPrincipals: []ec2types.AllowedPrincipal{
							{Principal: &principal},
						}},
					nil)

				_, err := controllerReconciler.Reconcile(ctx, reconcile.Request{
					NamespacedName: typeNamespacedName,
				})
				Expect(err).NotTo(HaveOccurred())
			})
			By("Deleting the specific resource instance AWSVPCEndpointServicePrincipal", func() {
				mockEC2Client.DescribeVpcEndpointServicePermissionsReturns(
					&ec2.DescribeVpcEndpointServicePermissionsOutput{
						AllowedPrincipals: []ec2types.AllowedPrincipal{
							{Principal: &principal},
						}},
					nil)

				Expect(k8sClient.Delete(ctx, awsvpcendpointserviceprincipal)).To(Succeed())
				updatedResource := &ec2operatorv1alpha1.AWSVPCEndpointServicePrincipal{
					ObjectMeta: metav1.ObjectMeta{
						Name:      typeNamespacedName.Name,
						Namespace: typeNamespacedName.Namespace,
					},
				}
				Eventually(komega.Object(updatedResource), waitShort, pollingInterval).ShouldNot(HaveField("ObjectMeta.DeletionTimestamp", BeZero()))

				_, err := controllerReconciler.Reconcile(ctx, reconcile.Request{
					NamespacedName: typeNamespacedName,
				})
				Expect(err).NotTo(HaveOccurred())
				Expect(mockEC2Client.DescribeVpcEndpointServicePermissionsCallCount()).To(Equal(1))
				Expect(mockEC2Client.ModifyVpcEndpointServicePermissionsCallCount()).To(Equal(1))

				updatedResource = &ec2operatorv1alpha1.AWSVPCEndpointServicePrincipal{
					ObjectMeta: metav1.ObjectMeta{
						Name:      typeNamespacedName.Name,
						Namespace: typeNamespacedName.Namespace,
					},
				}
				By(fmt.Sprintf("Waiting for AWSVPCEndpointServicePrincipal resource %s to be deleted", typeNamespacedName.Name), func() {
					Eventually(func() error {
						_, err := komega.Object(updatedResource)()
						return err
					}, waitShort, pollingInterval).Should(Satisfy(errors.IsNotFound))
				})
			})
		})
		It("should successfully reconcile the resource deletion and do nothing if the Service Principal doesn't exist on the VPC Endpoint Service", func() {
			By("Reconciling the first time to set the finalizer", finalizerReconcile)
			By("Deleting the specific resource instance AWSVPCEndpointServicePrincipal", func() {
				mockEC2Client.DescribeVpcEndpointServicePermissionsReturns(
					&ec2.DescribeVpcEndpointServicePermissionsOutput{
						AllowedPrincipals: []ec2types.AllowedPrincipal{}},
					nil)

				Expect(k8sClient.Delete(ctx, awsvpcendpointserviceprincipal)).To(Succeed())
				updatedResource := &ec2operatorv1alpha1.AWSVPCEndpointServicePrincipal{
					ObjectMeta: metav1.ObjectMeta{
						Name:      typeNamespacedName.Name,
						Namespace: typeNamespacedName.Namespace,
					},
				}
				Eventually(komega.Object(updatedResource), waitShort, pollingInterval).ShouldNot(HaveField("ObjectMeta.DeletionTimestamp", BeZero()))

				_, err := controllerReconciler.Reconcile(ctx, reconcile.Request{
					NamespacedName: typeNamespacedName,
				})
				Expect(err).NotTo(HaveOccurred())
				Expect(mockEC2Client.DescribeVpcEndpointServicePermissionsCallCount()).To(Equal(1))
				Expect(mockEC2Client.ModifyVpcEndpointServicePermissionsCallCount()).To(Equal(0))

				updatedResource = &ec2operatorv1alpha1.AWSVPCEndpointServicePrincipal{
					ObjectMeta: metav1.ObjectMeta{
						Name:      typeNamespacedName.Name,
						Namespace: typeNamespacedName.Namespace,
					},
				}
				By(fmt.Sprintf("Waiting for AWSVPCEndpointServicePrincipal resource %s to be deleted", typeNamespacedName.Name), func() {
					Eventually(func() error {
						_, err := komega.Object(updatedResource)()
						return err
					}, waitShort, pollingInterval).Should(Satisfy(errors.IsNotFound))
				})

			})
			It("should fail to reconcile the resource and add the Service Principal to a non-existent VPC endpoint service", func() {
				By("Reconciling the first time to set the finalizer", finalizerReconcile)
				By("Reconciling the created resource using mock ec2 responses simulating the VPC Endpoint Service does not exist", func() {
					mockEC2Client.DescribeVpcEndpointServicePermissionsReturns(
						&ec2.DescribeVpcEndpointServicePermissionsOutput{
							AllowedPrincipals: []ec2types.AllowedPrincipal{}},
						nil)
					mockEC2Client.ModifyVpcEndpointServicePermissionsReturns(
						&ec2.ModifyVpcEndpointServicePermissionsOutput{
							AddedPrincipals: []ec2types.AddedPrincipal{
								{Principal: &principal},
							},
						}, nil)
					mockEC2Client.DescribeVpcEndpointServiceConfigurationsReturns(&ec2.DescribeVpcEndpointServiceConfigurationsOutput{ServiceConfigurations: []ec2types.ServiceConfiguration{}}, nil)

					controllerReconciler = &controller.AWSVPCEndpointServicePrincipalReconciler{
						Client: k8sClient,
						Scheme: k8sClient.Scheme(),
					}

					_, err := controllerReconciler.Reconcile(ctx, reconcile.Request{
						NamespacedName: typeNamespacedName,
					})
					Expect(err).To(HaveOccurred())
					Expect(err.Error()).To(ContainSubstring("not found"))
					Expect(mockEC2Client.DescribeVpcEndpointServiceConfigurationsCallCount()).To(Equal(0))
					Expect(mockEC2Client.DescribeVpcEndpointServicePermissionsCallCount()).To(Equal(0))
					Expect(mockEC2Client.ModifyVpcEndpointServicePermissionsCallCount()).To(Equal(0))

					updatedResource := &ec2operatorv1alpha1.AWSVPCEndpointServicePrincipal{
						ObjectMeta: metav1.ObjectMeta{
							Name:      typeNamespacedName.Name,
							Namespace: typeNamespacedName.Namespace,
						},
					}
					Expect(komega.Object(updatedResource)).Should(HaveField("Status.Ready", false))
				})
			})
		})
	})
})
